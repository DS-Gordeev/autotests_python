Для выхода из просмотра нужно нажать "q"!!!

git bash here

git remote add origin https://gitlab.com/ppdp/test/load-tests.git # подключение репозитория
git config --global user.name "Dmitriy Gordeev"
git config --global user.email "gordeev@ppdp.ru"


git init - создает локальный репозиторий
touch .gitignore # создание файл gitignore


git status    # Для проверки на какой ветке мы находимся и статуса файлов этой ветки
git stash     # Прячет все текущие изменения в stash
git stash list    # Посмотркть список всех отложенных изменений
git stash pop    # Достать изменения из стека и вернуть их в рабочую копию

git mv index.html index.js # переименовали файл index.html в index.js
git rm -r --cached path_to_your_folder/ # удалить папку из отслеживаемых git
git rm main.html # Git удалит файл main.html и перестанет его отслеживать
git rm -f <имя файла> # Удалим файл из рабочей копии и индекса, несмотря на все предупреждения.
git rm --cached <имя файла> # Удалим файл из индекса и перемеcтим его в категорию Untracked

git restore --source 09c2240 <имя файла> #  Вернем файл sample.txt к определенному коммиту с хэшем 09c2240. При этом мы изменим только файл в рабочей копии, файл в области индекса не поменяется.
git restore --staged --worktree <имя файла> # Вернем файл в индексе и рабочей копии к состоянию последнего коммита
git restore . # Отменить ВСЕ локальные изменения в текущей ветке

git add .
git commit -m "Initial commit"
git push -u origin master


git commit --amend -m "First commit: new files added"
# добавили эти файлы к предыдущему коммиту (параметр --amend), изменяет предыдущий commit, а не добавляет новый


git restore . - Отменить ВСЕ локальные изменения в текущей ветке


git log # просмотр истории всех коммитов. Для выхода из просмотра нужно нажать "q"
git log -4  # Показывает 4 (четыре) последних коммита
git log -p  # Показывает коммиты и изменения в них
git log --pretty=oneline  # Выводио коммиты в хронологическом порядке одной строкой (удобный просмотр)


git show HEAD # показывает изменения произведенные в последним коммите. Указав вместо HEAD первые
пять символов хэша можно просмотреть нужный коммит
git diff <хэш_1> <хэш_2>    # Показывает разницу между двумя коммитами


git branch # показывает в какой ветке мы находимся
git branch dev # создание новой ветки
git branch -a # показывает список всех веток (локальные и удаленные)
git branch -d dev # удаляет ветку dev если она слита с какой-либо другой веткой
git branch -D dev # удаляет ветку dev в любом случае


git checkout dev # переключение на верку dev
git checkout -b develop # создать новую ветку (из текущего HEAD положения) develop и СРАЗУ переключиться на неё
git checkout HEAD~3 # Переключится на три коммита назад
git checkout HEAD^ # Переключится на предыдущий коммит (относительно того на который указывает HEAD)
git checkout 5df3f7e # Переключиться на конкретный коммит (указываем первые символы кго хеш`а)


git revert HEAD~1 #  Команда, отменяющая изменения внесенные в переданном коммита. Она заменяет файлы в рабочей копии на файлы предка переданного коммита,
а затем делает коммит, чтобы сохранить изменения. HEAD~1 - Изменяем последний коммит на предпоследний (откатываем его изменения)
git revert --abort # Данный ключ используется только при разрешении конфликтов. Прерывает выполнение команды если есть конфликты
git revert --continue # Данный ключ используется только при разрешении конфликтов. Продолжает выполнение команды после разрешения конфликтов


git reset <ключ> <адрес коммита> # Переносит указатель ветки на переданный коммит
git reset --soft <адрес коммита> # Команда не отменяет изменения ни в индексе, ни в рабочей копии.
Все файлы останутся в том же состоянии, в котором были, но указатель ветки будет передвинут.
git reset --hard <адрес коммита> # Команда удалит все изменения так, чтобы состояние индекса и рабочей копии полностью соответствовали коммиту, к которому мы сделали reset
git reset ORIG_HEAD # Вернет указатель ветки на коммит, с которого вы делали git reset, и вы вернете все изменения, даже если использовали ключ --hard
git push --force # После reset можно сделать форс-пуш для того что бы убрать все коммиты до того на который ресетнулись.


git merge --no-ff <Имя ветки КОТОРУЮ вливаем в master> # ЯВНОЕ СЛИЯНИЕ (on fast-forward). Создается НОВЫЙ коммит в ветке master который объединяет в себе два коммита:
последний из ветки master и последний из ветки develop.
git merge <Имя ветки КОТОРУЮ вливаем в master> # НЕЯВНОЕ СЛИЯНИЕ (fast-git logforward но умолчанию). Не создает новый коммит, а переносит указатель ветки master на
последний коммит ветки develop, т.е. ветка develop "как бы" стала веткой master. Работает только если в ветке master НЕ БЫЛО новых коммитов после ответвления develop

git push origin --delete branch_name # удалить удаленную ветку

https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet # документация по разметке Markdown Cheatsheet файла README.md 




